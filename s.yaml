# ------------------------------------
#   If you need English case, you can refer to [s_en.yaml] file
# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc
#   组件帮助文档：https://www.serverless-devs.com/fc/readme
#   Yaml参考文档：https://www.serverless-devs.com/fc/yaml/readme
#   关于：
#      - Serverless Devs和FC组件的关系、如何声明/部署多个函数、超过50M的代码包如何部署
#      - 关于.fcignore使用方法、工具中.s目录是做什么、函数进行build操作之后如何处理build的产物
#   等问题，可以参考文档：https://www.serverless-devs.com/fc/tips
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------
edition: 1.0.0
name: draw-something-demo3
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: master

vars: # 全局变量
  region: cn-hangzhou
  service:
    name: websocket-demo-liyue
    description: 'a webSocket demo'
    internetAccess: true       # 设为true让function可以访问公网
    role: 'acs:ram::xxxxxxx:role/xxxxxx-role' # 授予函数计算所需权限的RAM role, 使用场景包含 1. 把 function产生的 log 发送到用户的 logstore 中 2. 为function 在执行中访问其它云资源生成 token
    vpcConfig:                # VPC配置, 配置后function可以访问指定VPC
      vpcId: vpc-xxxxxxx              # VPC ID
      securityGroupId: sg-xxxxxx    # 安全组ID
      vswitchIds:             # 交换机 ID 列表
        - vsw-xxxxxx
    logConfig:                       # log配置，function产生的log会写入这里配置的logstore
      project: xxxx-demo                  # loghub中的project名称
      logstore: xxxx-logstore                  # loghub中的logstore名称
      enableRequestMetrics: true     # RequestMetrics开关，取值true/false
      enableInstanceMetrics: true    # InstanceMetrics开关，取值true/false
  serverEnvironment:         # 服务端函数环境变量
    RedisHost: 'r-xxxxxxxx.redis.rds.aliyuncs.com'          # redis服务器host地址
    RedisPort: 6379                                                   # redis服务器端口
    ServerPort: 9000                                                        # 函数监听端口
  frontEnvironment:         # 前端函数环境变量
    FrontPort: 9000    

services:
  draw-server: # 业务名称/模块名称
    # 如果只想针对 helloworld 下面的业务进行相关操作，可以在命令行中加上 helloworld，例如：
    # 只对helloworld进行构建：s helloworld build
    # 如果不带有 helloworld ，而是直接执行 s build，工具则会对当前Yaml下，所有和 helloworld 平级的业务模块（如有其他平级的模块，例如下面注释的next-function），按照一定顺序进行 build 操作
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:       # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy: # 在deploy之前运行
        - run: npm install --legacy-peer-deps           # 要执行的系统命令，类似于一种钩子的形式
          path: ./                 # 执行系统命令/钩子的路径
      # post-deploy: # 在deploy之后运行
      #   - component: fc versions publish # 要运行的命令行
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: draw-server-demo3
        description: 'draw-something-server-demo-3'
        runtime: custom
        codeUri: ./
        handler: index.handler
        memorySize: 512
        timeout: 300                    #超时时间可以设置的长一些
        caPort: 9000                  # CustomContainer/Runtime指定端口
        environmentVariables: ${vars.serverEnvironment}         # 环境变量
        instanceConcurrency: 1        # 单实例多并发设置为1
        customRuntimeConfig:           # 自定义运行时启动配置
            command:                   # 启动指令，示例值: ["/code/myserver"]
                - node
            args:                      # 启动参数，示例值: ["-arg1", "value1"]
                - ws-server.js
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*
              serviceName: websocket-demo-liyue
              functionName: draw-server-demo3
              methods:
                - GET
                - POST
  drwa-front:
    component: fc
    actions: # 自定义执行逻辑
      pre-deploy: # 在deploy之前运行
        - run: node setEnv.js ${draw-server.output.url.custom_domain[0].domain}
          path: ./
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: draw-front-demo3
        description: 'draw-something-front-demo-3'
        runtime: custom
        codeUri: ./
        handler: index.handler
        memorySize: 512
        timeout: 60                   
        caPort: 9000                  # CustomContainer/Runtime指定端口
        environmentVariables:         # 环境变量
          PORT: ${vars.frontEnvironment.FrontPort}   # 前端监听端口
        instanceConcurrency: 20        # 单实例多并发设置为1
        customRuntimeConfig:           # 自定义运行时启动配置
            command:                   # 启动指令，示例值: ["/code/myserver"]
                - npm
            args:                      # 启动参数，示例值: ["-arg1", "value1"]
                - run
                - dev
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*
              serviceName: websocket-demo-liyue
              functionName: draw-front-demo3
              methods:
                - GET
                - POST

#  next-function: # 第二个函数的案例，仅供参考
#    # 如果在当前项目下执行 s deploy，会同时部署模块：
#    #   helloworld：服务hello-world-service，函数cpp-event-function
#    #   next-function：服务hello-world-service，函数next-function-example
#    # 如果想单独部署当前服务与函数，可以执行 s + 模块名/业务名 + deploy，例如：s next-function deploy
#    # 如果想单独部署当前函数，可以执行 s + 模块名/业务名 + deploy function，例如：s next-function deploy function
#    # 更多命令可参考：https://www.serverless-devs.com/fc/readme#文档相关
#    component: fc
#    props:
#      region: ${vars.region}
#      service: ${vars.service} # 应用整体的服务配置
#      function: # 定义一个新的函数
#        name: next-function-example
#        description: 'hello world by serverless devs'
